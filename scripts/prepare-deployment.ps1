# Script chu·∫©n b·ªã files ƒë·ªÉ deploy l√™n AWS
# Ch·∫°y tr√™n m√°y Windows tr∆∞·ªõc khi upload

param(
    [string]$OutputDir = ".\deployment-package"
)

Write-Host "üöÄ Chu·∫©n b·ªã deployment package..." -ForegroundColor Cyan

# T·∫°o th∆∞ m·ª•c output
if (Test-Path $OutputDir) {
    Remove-Item -Recurse -Force $OutputDir
}
New-Item -ItemType Directory -Path $OutputDir | Out-Null

# 1. Backup database
Write-Host "`nüì¶ 1. Backup database..." -ForegroundColor Yellow
.\scripts\backup-db.ps1 -Output "$OutputDir\db_production.dump"

if (Test-Path "$OutputDir\db_production.dump") {
    $dbSize = (Get-Item "$OutputDir\db_production.dump").Length / 1MB
    Write-Host "   ‚úÖ Database backup: $([math]::Round($dbSize, 2)) MB" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Database backup failed!" -ForegroundColor Red
    exit 1
}

# 2. Backup uploads folder
Write-Host "`nüì¶ 2. Backup uploads folder..." -ForegroundColor Yellow
if (Test-Path ".\backend\uploads") {
    Compress-Archive -Path ".\backend\uploads\*" -DestinationPath "$OutputDir\uploads_backup.zip" -Force
    $uploadSize = (Get-Item "$OutputDir\uploads_backup.zip").Length / 1MB
    Write-Host "   ‚úÖ Uploads backup: $([math]::Round($uploadSize, 2)) MB" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  No uploads folder found (skip)" -ForegroundColor Yellow
}

# 3. Create .env template
Write-Host "`nüì¶ 3. Create .env template..." -ForegroundColor Yellow
$envTemplate = @"
# ‚ö†Ô∏è ƒê·ªîI T·∫§T C·∫¢ GI√Å TR·ªä N√ÄY TR∆Ø·ªöC KHI DEPLOY!

NODE_ENV=production
PORT=3001

# Database - ƒê·ªïi password m·∫°nh!
DATABASE_URL=postgresql://admin:CHANGE_THIS_PASSWORD@db:5432/Web_QuanLyDiemRenLuyen?schema=public

# JWT Secret - T·∫°o chu·ªói ng·∫´u nhi√™n b·∫±ng: openssl rand -base64 48
JWT_SECRET=CHANGE_THIS_TO_RANDOM_STRING_MIN_32_CHARS
JWT_EXPIRES_IN=7d

# CORS - ƒê·ªïi th√†nh domain c·ªßa b·∫°n
CORS_ORIGIN=https://yourdomain.com

# Log Level
LOG_LEVEL=info
"@
$envTemplate | Out-File -FilePath "$OutputDir\backend.env.template" -Encoding UTF8
Write-Host "   ‚úÖ Created: backend.env.template" -ForegroundColor Green

$frontendEnvTemplate = @"
# Frontend Environment Variables

# API URL - ƒê·ªïi th√†nh domain c·ªßa b·∫°n
REACT_APP_API_URL=https://yourdomain.com/api
"@
$frontendEnvTemplate | Out-File -FilePath "$OutputDir\frontend.env.template" -Encoding UTF8
Write-Host "   ‚úÖ Created: frontend.env.template" -ForegroundColor Green

# 4. Create deployment instructions
Write-Host "`nüì¶ 4. Create deployment checklist..." -ForegroundColor Yellow
$checklist = @"
# üìã DEPLOYMENT CHECKLIST

## Files trong package n√†y:
- ‚úÖ db_production.dump - Database backup
- ‚úÖ uploads_backup.zip - Uploaded files
- ‚úÖ backend.env.template - Backend environment template
- ‚úÖ frontend.env.template - Frontend environment template
- ‚úÖ DEPLOYMENT_CHECKLIST.txt - File n√†y

## B∆∞·ªõc ti·∫øp theo:

### 1. Upload files l√™n EC2 b·∫±ng WinSCP
   - K·∫øt n·ªëi WinSCP v·ªõi EC2 (d√πng .ppk key)
   - Upload t·∫•t c·∫£ files v√†o: /home/ubuntu/dacn-web/backups/

### 2. SSH v√†o EC2 b·∫±ng PuTTY

### 3. Clone repository
   cd ~/dacn-web
   git clone https://github.com/ThLin57/DACN_Web_quanly_hoatdongrenluyen.git app
   cd app

### 4. T·∫°o .env files
   # Backend
   nano ~/dacn-web/app/backend/.env
   # Copy n·ªôi dung t·ª´ backend.env.template
   # ‚ö†Ô∏è ƒê·ªîI: DATABASE_URL password, JWT_SECRET, CORS_ORIGIN
   
   # Frontend
   nano ~/dacn-web/app/frontend/.env
   # Copy n·ªôi dung t·ª´ frontend.env.template
   # ‚ö†Ô∏è ƒê·ªîI: REACT_APP_API_URL th√†nh domain c·ªßa b·∫°n

### 5. T·∫°o JWT Secret ng·∫´u nhi√™n m·∫°nh
   openssl rand -base64 48
   # Copy output v√† paste v√†o backend/.env ‚Üí JWT_SECRET=...

### 6. S·ª≠a docker-compose.yml
   nano ~/dacn-web/app/docker-compose.yml
   # ƒê·ªïi POSTGRES_PASSWORD v√† DATABASE_URL password
   # ƒê·ªïi restart: unless-stopped ‚Üí restart: always
   # Comment/x√≥a d√≤ng expose port 5432

### 7. Build v√† ch·∫°y database
   cd ~/dacn-web/app
   docker compose --profile prod build
   docker compose up -d db
   sleep 10

### 8. Restore database
   docker cp ~/dacn-web/backups/db_production.dump dacn_db_prod:/tmp/db.dump
   docker compose exec db bash -c "pg_restore -U admin -d Web_QuanLyDiemRenLuyen -c -v /tmp/db.dump"

### 9. Restore uploads
   cd ~/dacn-web/backups
   unzip uploads_backup.zip
   cp -r uploads/* ~/dacn-web/app/backend/uploads/

### 10. Ch·∫°y application
   cd ~/dacn-web/app
   docker compose --profile prod up -d app
   docker compose logs -f app

### 11. Test
   curl http://localhost:3001/api/health
   # N√™n th·∫•y: {"status":"ok",...}

### 12. C·∫•u h√¨nh Nginx + SSL
   # Xem h∆∞·ªõng d·∫´n chi ti·∫øt trong AWS_DEPLOYMENT_GUIDE.md

---

üìñ Xem h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß: AWS_DEPLOYMENT_GUIDE.md
"@
$checklist | Out-File -FilePath "$OutputDir\DEPLOYMENT_CHECKLIST.txt" -Encoding UTF8
Write-Host "   ‚úÖ Created: DEPLOYMENT_CHECKLIST.txt" -ForegroundColor Green

# 5. Summary
Write-Host "`n" + "="*60 -ForegroundColor Cyan
Write-Host "‚úÖ DEPLOYMENT PACKAGE READY!" -ForegroundColor Green
Write-Host "="*60 -ForegroundColor Cyan
Write-Host "`nPackage location: $OutputDir" -ForegroundColor Yellow
Write-Host "`nFiles created:" -ForegroundColor White
Get-ChildItem $OutputDir | ForEach-Object {
    $size = if ($_.Length) { "$([math]::Round($_.Length / 1MB, 2)) MB" } else { "N/A" }
    Write-Host "   - $($_.Name) ($size)" -ForegroundColor Gray
}

Write-Host "`nüìå Next steps:" -ForegroundColor Cyan
Write-Host "   1. ƒê·ªçc DEPLOYMENT_CHECKLIST.txt" -ForegroundColor White
Write-Host "   2. Upload files b·∫±ng WinSCP l√™n EC2" -ForegroundColor White
Write-Host "   3. Xem AWS_DEPLOYMENT_GUIDE.md ƒë·ªÉ bi·∫øt chi ti·∫øt" -ForegroundColor White

Write-Host "`n‚ö†Ô∏è  QUAN TR·ªåNG:" -ForegroundColor Yellow
Write-Host "   - ƒê·ªïi t·∫•t c·∫£ passwords v√† secrets trong .env templates!" -ForegroundColor Red
Write-Host "   - Backup file .ppk key c·ªßa EC2 an to√†n!" -ForegroundColor Red
Write-Host "   - Gi·ªØ file db_production.dump ·ªü n∆°i an to√†n!" -ForegroundColor Red

Write-Host ""
