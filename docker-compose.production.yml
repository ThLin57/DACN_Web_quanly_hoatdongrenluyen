# Production docker-compose với multi-stage build để giảm dung lượng
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine  # Alpine version nhẹ hơn
    container_name: hoatdongrenluyen-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hoatdongrenluyen}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-this-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: hoatdongrenluyen-backend
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-change-this-password}@db:5432/${POSTGRES_DB:-hoatdongrenluyen}
      JWT_SECRET: ${JWT_SECRET:-change-this-jwt-secret}
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        REACT_APP_API_URL: https://hoatdongrenluyen.io.vn/api
    container_name: hoatdongrenluyen-frontend
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: hoatdongrenluyen-network
